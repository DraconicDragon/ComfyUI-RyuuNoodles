name: ðŸš€ Create GitHub Release + Changelog

on:
  push:
    paths:
      - "pyproject.toml" # runs on every branch
  workflow_dispatch:

jobs:
  auto-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write # needed to push tags
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      tag_created: ${{ steps.create_tag.outputs.tag_created }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # fetch full history including tags
          fetch-tags: true

      - name: Extract version
        id: get_version
        run: |
          # grab version="X.Y.Z(-suffix)" from pyproject.toml
          version=$(grep -E '^version *= *' pyproject.toml \
                 | sed -E 's/version *= *"([^"]+)"/\1/')
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Check for existing tag
        id: check_tag
        run: |
          tag="v${{ steps.get_version.outputs.version }}"
          if git rev-parse "$tag" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag $tag already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Tag $tag does not exist"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create & push tag
        id: create_tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          tag="v${{ steps.get_version.outputs.version }}"
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "$tag"
          git push origin "$tag"
          echo "tag_created=true" >> $GITHUB_OUTPUT
          echo "Created and pushed tag: $tag"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Skip tag creation
        if: steps.check_tag.outputs.exists == 'true'
        run: |
          echo "tag_created=false" >> $GITHUB_OUTPUT
          echo "Skipping tag creation as it already exists"

  release:
    runs-on: ubuntu-latest
    needs: auto-tag
    if: needs.auto-tag.outputs.tag_created == 'true'
    permissions:
      contents: write # needed to create releases

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # fetch full history including tags
          fetch-tags: true

      - name: Get previous and latest tags
        id: tags
        run: |
          tags=($(git tag --sort=-creatordate))
          latest_tag=${tags[0]}
          previous_tag=${tags[1]}
          echo "Latest tag: $latest_tag"
          echo "Previous tag: $previous_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
          echo "previous_tag=$previous_tag" >> $GITHUB_OUTPUT

      - name: Exit if prerelease
        if: contains(steps.tags.outputs.latest_tag, '-')
        run: |
          echo "Pre-release tag detected (${{ steps.tags.outputs.latest_tag }}), skipping changelog."
          exit 0

      - name: Build Changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          fromTag: ${{ steps.tags.outputs.previous_tag }}
          toTag: ${{ steps.tags.outputs.latest_tag }}
          mode: "COMMIT"
          configurationJson: |
            {
              "template": "#{{CHANGELOG}}",
              "categories": [
                { "title": "## Feature", "labels": ["feat", "feature"] },
                { "title": "## Fix",     "labels": ["fix", "bug"]      },
                { "title": "## Other",   "labels": []                  }
              ],
              "label_extractor": [
                {
                  "pattern": "^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test){1}(\\([\\w\\-\\.]+\\))?(!)?: ([\\w ])+([\\s\\S]*)",
                  "on_property": "title",
                  "target": "$1"
                }
              ]
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Append compare URL and save changelog to file
        run: |
          echo "${{ steps.changelog.outputs.changelog }}" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.tags.outputs.previous_tag }}...${{ steps.tags.outputs.latest_tag }}" >> CHANGELOG.md

      - name: Create GitHub Release with changelog
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tags.outputs.latest_tag }}
          name: ${{ steps.tags.outputs.latest_tag }}
          body: |
            ${{ steps.changelog.outputs.changelog }}

            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.tags.outputs.previous_tag }}...${{ steps.tags.outputs.latest_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
